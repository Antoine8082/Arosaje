{% extends 'base.html.twig' %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('assets/css/detail.css') }}">
{% endblock %}
{% block body %}

    <div class="container-detail">
        <h2>{{ post.title|capitalize }}</h2>
        {% if app.user.id == post.userPost.id %}
            <label for="guardian">Gardien :</label>
            {% if post.guardian %}
                <input type="text" id="guardian" value="{{ post.guardian.email }}" disabled>
            {% else %}
                <input type="text" id="guardian">
            {% endif %}
        {% else %}
            {% if post.guardian %}
                <label for="guardian">Gard√© par {{ post.guardian.email }}</label>
            {% endif %}
        {% endif %}
        <span id="res_fetch_guardian"></span>
        {% set imagePath = '/uploads/images/' ~ post.image %}
        <p>{{ post.description }}</p>
        <div class="image">
            <img src="{{ imagePath }}" alt="" id="img_card">
        </div>
    </div>
    <section>
        <h3>Espace commentaire</h3>
        <textarea id="comment" name="comment"
                  rows="5" cols="33">
        </textarea>
        <button id="btn-comment">Envoyer</button>
        <div id="comments-container">
            {% set i = 0 %}
            {% for comment in post.comments %}

            <div class="comment-card post_{{ i }}">
                <span class="delete_com id_{{ comment.id }} post_comment_{{ i }}"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);transform: ;msFilter:;"><path d="M21 5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V5zm-4.793 9.793-1.414 1.414L12 13.414l-2.793 2.793-1.414-1.414L10.586 12 7.793 9.207l1.414-1.414L12 10.586l2.793-2.793 1.414 1.414L13.414 12l2.793 2.793z"></path></svg></span>
                <div class="author" id="card_author">{{ comment.userComment.email }}
                    <span class="dateSend" id="card_date">{{ comment.sendDate|date }}</span>
                </div>
                <br>
                <div class="comment-content" id="card_content">{{ comment.content }}</div>
            </div>
                {% set i = i + 1 %}
                {% endfor %}
        </div>
    </section>
    <template id="comment-area">
        <div class="comment-card">
            <div class="author" id="card_author"><span class="dateSend" id="card_date"></span></div>
            <span class="delete_com"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);transform: ;msFilter:;"><path d="M21 5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V5zm-4.793 9.793-1.414 1.414L12 13.414l-2.793 2.793-1.414-1.414L10.586 12 7.793 9.207l1.414-1.414L12 10.586l2.793-2.793 1.414 1.414L13.414 12l2.793 2.793z"></path></svg></span>
            <br>
            <div class="comment-content" id="card_content"></div>
        </div>
    </template>
    <script>
        const inputGuard = document.querySelector('#guardian')
        const btnComment = document.querySelector('#btn-comment');
        const deleteCom = document.querySelectorAll('.delete_com')

        updateComsArea()
        function updateComsArea(){
            deleteCom.forEach(element => {
                element.addEventListener('click', (e) => {
                    const idCom = e.currentTarget.classList[1].split('_')[1]
                    e.currentTarget.parentElement.remove()
                    deleteComment(idCom);
                })
            })
        }
        btnComment.addEventListener('click', () => {
            sendComment();
        })
        inputGuard.addEventListener('change', () => {
            if (inputGuard.value.length >= 4) {
                setGuardian(inputGuard.value)
            }
        });
        function deleteComment(id){
            const opts = {
                method: "POST",
                body: JSON.stringify({
                        post: {{ post.id }},
                        comment_id: id
                    }
                )};
            fetch('/api/deleteCommentByPost',opts)
                .then((res) => res.json())
                .then((res) => console.log(res))
        }
        function setGuardian(inputGuardVal) {
            const opts = {
                method: "POST",
                body: JSON.stringify({
                    post: {{ post.id }},
                    guardian: inputGuardVal
                }),
            };
            fetch('/api/guardian', opts)
                .then((res) => res.json())
                .then((res) => {
                    const txt = document.querySelector('#res_fetch_guardian');
                    if (res) {
                        txt.textContent = "Success !"
                        txt.classList.add('success')
                        txt.classList.remove('error')
                    } else {
                        txt.textContent = "Unknown user"
                        txt.classList.add('error')
                        txt.classList.remove('success')
                    }

                });
        }

        function sendComment() {
            const contentComment = document.querySelector('#comment').value
            const opts = {
                method: "POST",
                body: JSON.stringify({
                    post: {{ post.id }},
                    sender: {{ app.user.id }},
                    content: contentComment
                })
            };
            fetch('/api/addComment', opts)
                .then(res => res.json())
                .then(res => {
                    buildCommentPart()
                    document.querySelector('#comment').value = ""
                })
        }

        function fetchComments() {
            const opts = {
                method: "POST",
                body: JSON.stringify({
                    post: {{ post.id }},
                })
            };
        }
        function buildCommentPart() {
            const template = document.querySelector('#comment-area')
            const clone = template.content.cloneNode(true);
            const contentComment = document.querySelector('#comment').value
            const box = clone.querySelector('.comment-card');
            const author = clone.querySelector('#card_author');
            const date = clone.querySelector('#card_date');
            const content = clone.querySelector('#card_content')
            box.classList.add('new-box')
            author.textContent += "{{ app.user.email }}";
            date.textContent += new Date().toLocaleString();
            content.textContent = contentComment;
            box.classList.add('post_'+ {{ i }})
            document.querySelector('#comments-container').appendChild(clone);
        }

    </script>

{% endblock %}